{"version":3,"sources":["components/UploadFile.tsx","api/requests.ts","components/SelectTag.tsx","ImagePreview.tsx","App.tsx","TagTable.tsx","index.tsx"],"names":["thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","DropZone","styled","div","Container","section","ChooseFile","props","useState","files","setFiles","useDropzone","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","forEach","getRootProps","open","getInputProps","thumbs","style","src","name","useEffect","revokeObjectURL","className","Button","variant","type","onClick","domain","createImage","image","title","a","console","log","formData","FormData","append","Blob","fetch","method","body","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","CONNECT_TAGS","gql","GET_VACANT_TAGS","GET_CONNECTED_TAGS","REMOVE_TAG_CONNECTION","getStyles","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MultipleSelectChip","useTheme","React","setPersonName","selected","setSelected","useMutation","connectTags","removeConnection","selectTags","useQuery","variables","idImage","image_id","connectedTags","handleUpload","tag_id_list","data","vacantTags","tag","tagName","push","parseInt","id","length","idTag","refetch","loading","Box","Stack","spacing","direction","imageTags","index","Chip","label","onDelete","chipToDelete","FormControl","sx","m","InputLabel","Select","labelId","multiple","value","onChange","event","target","split","input","OutlinedInput","renderValue","gap","MenuItem","IMAGE","ImagePreview","link","splited","useLocation","pathname","error","margin","Typography","component","IMAGES","UPDATE_IMAGE","DELETE_IMAGE","Row","row","editing","setEditing","text","setText","setTitle","updateImage","deleteImage","icon_color","handleDeletion","useRef","Fragment","TableRow","borderBottom","TableCell","scope","TextField","to","cursor","align","upload_date","uploader_ip","color","filteredDate","_date","split_by_t","date","App","droped","setDroped","_file","setFile","_image","setImage","exact","path","basepath","TableContainer","Paper","Table","aria-label","TableHead","TableBody","allImages","info","uploadDateTime","uploaderIp","marginX","reader","FileReader","onabort","onerror","onload","binaryStr","result","readAsArrayBuffer","justifySelf","alignContent","RENAME_TAG","DELETE_TAG","CREATE_TAG","TAGS","renameTag","deleteTag","TagTable","setTagName","createTag","handleCreation","allTags","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c63665d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Button from '@mui/material/Button';\nimport styled from 'styled-components';\n\nimport {useDropzone} from 'react-dropzone';\n\nconst thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16\n};\n\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box' as any\n};\n\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden'\n};\n\nconst img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%'\n};\n\nconst DropZone = styled.div`\nflex: 1;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\npadding: 20px;\nborder-width: 2px;\nborder-radius: 2px;\nborder-color: #eeeeee;\nborder-style: dashed;\nbackground-color: #fafafa;\ncolor: #bdbdbd;\noutline: none;\ntransition: border .24s ease-in-out;\nopacity: 1.0;\n`\n\nconst Container =styled.section`\ndisplay: flex;\nflex-direction: column;\n// width: 700px;\n// justify-self: center;\n// margin-right: auto;\n// margin-left: auto;\n`\n\n\nexport default function ChooseFile(props: { onDrop: any }) {\n    const [files, setFiles] = useState<any>([]);\n    const { getRootProps, open, getInputProps } = useDropzone({\n        accept: \"image/*\",\n        onDrop: (acceptedFiles) => {\n            // @ts-ignore\n            setFiles(\n                acceptedFiles.map((file: any) =>\n                    Object.assign(file, {\n                        // @ts-ignore\n                        preview: URL.createObjectURL(file) as any,\n                    })\n                )\n            );\n            acceptedFiles.forEach((file: File) => {\n                props.onDrop(file);\n            });\n        },\n    });\n\n    const thumbs = files.map((file: File & {preview: any}) => (\n        <div style={thumb} key={file.name}>\n            <div style={thumbInner}>\n                <img src={file.preview} style={img} />\n            </div>\n        </div>\n    ));\n\n    useEffect(\n        () => () => {\n            // Make sure to revoke the data uris to avoid memory leaks\n            // @ts-ignore\n            files.forEach((file) => URL.revokeObjectURL(file.preview));\n        },\n        [files]\n    );\n\n    return (\n        <Container>\n            <DropZone {...getRootProps({ className: \"dropzone\" })}>\n                <input {...getInputProps()} />\n                <p>Drag 'n' drop some files here, or click to select files</p>\n                <Button variant=\"outlined\" type=\"button\" onClick={open}>\n                    Open File Dialog\n                </Button>\n            </DropZone>\n            {/*@ts-ignore*/}\n            <aside style={thumbsContainer}>{thumbs}</aside>\n        </Container>\n    );\n}\n","const domain = \"http://127.0.0.1:8000\"\n\nexport async function createImage(image: ArrayBuffer, title: string) {\n    console.log(\"Asking for creating a request: \");\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('image', new Blob([image], {type: \"image/jpg\"} ));\n    /* const request = new XMLHttpRequest();\n    request.open(\"POST\", `${domain}/api/create-image`);\n    request.send(formData); */\n    let response = await fetch(`${domain}/api/create-image`, {\n        method: \"POST\",\n        body: formData,\n    });\n\n    return true;\n}\n\nexport async function getImages() {\n    let response = await fetch(`${domain}/api/get-images`, {\n        method: \"POST\", // or 'PUT'\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    });\n\n    return await response.json();\n}\n\n","import * as React from 'react';\nimport { Theme, useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport Chip from '@mui/material/Chip';\nimport {Button, Stack} from '@mui/material';\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\ninterface TagType {\n    id: number;\n    tagName: string;\n}\n\nconst CONNECT_TAGS = gql`\n  mutation connectTag($idImage: ID!, $idTag: [ID!]!) {\n    connectTag(idImage: $idImage, idTag: $idTag) {\n      success\n    }\n  }\n`;\n\nconst GET_VACANT_TAGS = gql`\n  query vacantTags($idImage: ID!) {\n    vacantTags(idImage: $idImage) {\n      id\n      tagName\n    }\n  }\n`;\n\nconst GET_CONNECTED_TAGS = gql`\n  query imageTags($idImage: ID!) {\n    imageTags(idImage: $idImage) {\n      id\n      tagName\n    }\n  }\n`;\n\nconst REMOVE_TAG_CONNECTION = gql`\n  mutation imageTags($idImage: ID!, $idTag: ID!) {\n    removeTagConnection(idImage: $idImage, idTag: $idTag) {\n      success\n    }\n  }\n`;\n\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\n  return {\n    fontWeight:\n      personName.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nexport default function MultipleSelectChip(props: {image_id: number}) {\n  const theme = useTheme();\n  const [personName, setPersonName] = React.useState<string[]>([]);\n  const [selected, setSelected] = React.useState<boolean>(false);\n  const [connectTags] = useMutation(CONNECT_TAGS);\n  const [removeConnection] = useMutation(REMOVE_TAG_CONNECTION);\n  // Receiving data\n  const selectTags = useQuery(GET_VACANT_TAGS, {\n    variables: { idImage: props.image_id },\n  });\n  const connectedTags = useQuery(GET_CONNECTED_TAGS, {\n    variables: { idImage: props.image_id },\n  });\n\n\n  const handleChange = (event: SelectChangeEvent<typeof personName>) => {\n    const {\n      target: { value },\n    } = event;\n    if (value.length !== 0) setSelected(true);\n    setPersonName(\n      // On autofill we get a the stringified value.\n      typeof value === \"string\" ? value.split(\",\") : value\n    );\n  };\n\n  const handleUpload = async () => {\n    console.log(\"Handle uploading\");\n    const tag_id_list = [];\n    for (let name of personName) {\n      for (let tag of selectTags.data.vacantTags) {\n        if (tag.tagName === name) tag_id_list.push(parseInt(tag.id));\n      }\n    }\n\n    console.log(tag_id_list, props.image_id);\n\n    if (!tag_id_list.length) return;\n\n    setPersonName([]);\n    await connectTags({\n      variables: { idImage: props.image_id, idTag: tag_id_list },\n    });\n    selectTags.refetch();\n    connectedTags.refetch();\n  };\n\n  const handleDelete =\n    (chipToDelete: { id: number; tagName: string }) => async () => {\n      // console.log(chipToDelete);\n      await removeConnection({\n        variables: { idImage: props.image_id, idTag: chipToDelete.id },\n      });\n\n      selectTags.refetch();\n      connectedTags.refetch();\n    };\n\n  return connectedTags.loading || selectTags.loading ? null : (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Stack\n        spacing={1}\n        width=\"700px\"\n        direction=\"row\"\n        marginBottom={\"20px\"}\n        marginTop={\"10px\"}\n        flexWrap=\"wrap\"\n      >\n        {connectedTags.data.imageTags.map(\n          (tag: { id: number; tagName: string }, index: number) => {\n            return <Chip key={tag.id} style={{ marginTop: \"10px\" }} label={tag.tagName} onDelete={handleDelete(tag)} />;\n          }\n        )}\n      </Stack>\n      <FormControl sx={{ m: 1, width: 300 }}>\n        <InputLabel id=\"demo-multiple-chip-label\">Available Tags</InputLabel>\n        <Select\n          labelId=\"demo-multiple-chip-label\"\n          id=\"demo-multiple-chip\"\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={\n            <OutlinedInput id=\"select-multiple-chip\" label=\"Available Tags\" />\n          }\n          renderValue={(selected) => (\n            <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\n              {selected.map((value, index) => (\n                <Chip key={index} label={value} />\n              ))}\n            </Box>\n          )}\n          MenuProps={MenuProps}\n        >\n          {selectTags.data.vacantTags.map(\n            (tag: { id: number; tagName: string }, index: number) => (\n              <MenuItem\n                key={tag.id}\n                value={tag.tagName}\n                style={getStyles(tag.tagName, personName, theme)}\n              >\n                {tag.tagName}\n              </MenuItem>\n            )\n          )}\n        </Select>\n      </FormControl>\n      {selected ? (\n        <Button\n          style={{ marginTop: \"10px\", width: \"120px\" }}\n          variant=\"contained\"\n          type=\"button\"\n          onClick={handleUpload}\n        >\n          Save tags\n        </Button>\n      ) : null}\n    </Box>\n  );\n}\n\n","\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport {Box, Typography} from \"@mui/material\";\nimport {useLocation} from \"react-router-dom\";\nimport SelectTag from \"./components/SelectTag\";\n\ninterface ImageBare {\n  image: {\n    id: number;\n    title: string;\n    image: string;\n  };\n}\n\nconst IMAGE = gql`\n  query image($image: String!) {\n    image(image: $image) {\n      id\n      title\n      image\n    }\n  }\n`;\n\nconst domain = \"http://127.0.0.1:8000\";\n\nfunction formLink(link?: string) {\n  return domain + \"/api/get-image/\" + link;\n}\n\nexport default function ImagePreview() {\n  const location = useLocation();\n  const splited = location.pathname.split(\"/\");\n\n  const { loading, error, data } = useQuery<ImageBare>(IMAGE, {\n    variables: { image: \"pic_storage/\" + splited[splited.length - 1] },\n  });\n\n  return loading ? null : (\n    <Box margin={\"10%\"} marginTop={\"150px\"}>\n      <Typography variant=\"h3\" component=\"h2\" marginBottom={\"20px\"}>\n        {data?.image.title}\n      </Typography>\n\n      {!loading ? (\n        <img\n          src={formLink(data?.image.image)}\n          style={{ width: 800, height: 600 }}\n        />\n      ) : null}\n      <SelectTag image_id={data!.image.id} />\n    </Box>\n  );\n}\n\n","import React, { useRef, useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@mui/material/Table\";\nimport Button from \"@mui/material/Button\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Typography from \"@mui/material/Typography\";\nimport Paper from \"@mui/material/Paper\";\nimport CreateIcon from \"@mui/icons-material/Create\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport CheckIcon from \"@mui/icons-material/Check\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  Link,\n} from \"react-router-dom\";\nimport ChooseFile from \"./components/UploadFile\";\nimport { createImage, getImages } from \"./api/requests\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { TextField } from \"@mui/material\";\nimport ImagePreview from \"./ImagePreview\";\n\ninterface ImageType {\n  id: number;\n  title: string;\n  image: string;\n  uploadDateTime: string;\n  uploaderIp: string;\n}\n\nconst IMAGES = gql`\n  query allImages {\n    allImages {\n      id\n      title\n      image\n      uploaderIp\n      uploadDateTime\n    }\n  }\n`;\n\n\nconst UPDATE_IMAGE = gql`\n  mutation updateImage($id: ID!, $title: String!){\n  updateImage(id: $id, title: $title) {\n    image {\n      id\n      title\n    }\n  }\n}\n`;\n\nconst DELETE_IMAGE = gql`\n  mutation deleteImage($id: ID!) {\n    deleteImage(id: $id) {\n      deleted\n    }\n  }\n`;\n\nconst domain = \"http://127.0.0.1:8000\";\n\nfunction formLink(link?: string) {\n  return domain + \"/api/get-image/\" + link;\n}\n\ninterface RowType {\n  index: number;\n  title: string;\n  link: string;\n  upload_date: string;\n  uploader_ip: string;\n}\n\ninterface ImageTypeData {\n  allImages: ImageType[];\n}\n\nfunction useOutsideAlerter(ref: any, callback: any) {\n  React.useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event: any) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        callback();\n      }\n    }\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n}\n\nfunction Row(props: { row: RowType, refetch: any }) {\n  const { row } = props;\n  const [editing, setEditing] = React.useState(0);\n  const [text, setText] = React.useState(row.title);\n  const [title, setTitle] = React.useState(row.title);\n  const [updateImage, { data, loading, error }] = useMutation(UPDATE_IMAGE);\n  const [deleteImage] = useMutation(DELETE_IMAGE);\n  const icon_color = \"#8f8f8f\";\n  const wrapperRef = React.useRef(null);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n  const handleConfirm = () => {\n    setTitle(text);\n    updateImage({ variables: { id: row.index, title: text } });\n    setEditing(0);\n  };\n  const handleDisconfirm = () => {\n    console.log(\"Hey\")\n      setEditing(0);\n    };\n  const handleEdit = () => {\n    setEditing(1);\n  };\n  const handleDeletion = async () => {\n    const data = await deleteImage({ variables: { id: row.index } });\n    console.log(data);\n    props.refetch()\n  };\n\n  return (\n    <React.Fragment>\n      <TableRow sx={{ \"& > *\": { borderBottom: \"unset\" } }}>\n        <TableCell>{row.index}</TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {editing ? (\n            <TextField\n              onChange={handleChange}\n              value={text}\n              // onBlur={handleDisconfirm}\n              id=\"margin-none\"\n              // defaultValue={row.title}\n            />\n          ) : (\n            <Link to={\"/test/images/preview/\" + row.link} style={{ cursor: \"pointer\" }}>\n              {title}\n            </Link>\n          )}\n        </TableCell>\n        <TableCell align=\"right\">{row.upload_date}</TableCell>\n        <TableCell align=\"right\">{row.uploader_ip}</TableCell>\n        <TableCell align=\"right\">\n          {editing ? (\n            <CheckIcon\n              onClick={handleConfirm}\n              style={{\n                marginRight: \"10px\",\n                color: icon_color,\n                cursor: \"pointer\",\n              }}\n            />\n          ) : (\n            <CreateIcon\n              onClick={handleEdit}\n              style={{\n                marginRight: \"10px\",\n                color: icon_color,\n                cursor: \"pointer\",\n              }}\n            />\n          )}\n          <DeleteIcon onClick={handleDeletion} style={{ color: icon_color, cursor: \"pointer\" }} />\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nfunction filteredDate(_date: string) {\n  const split_by_t = _date.split(\"T\");\n  const date = split_by_t[1].split(\".\");\n  return split_by_t[0] + \" \" + date[0];\n}\n\nexport default function App() {\n  const [droped, setDroped] = React.useState(0);\n\n  const [_file, setFile] = React.useState<any>(null);\n  const [_image, setImage] = React.useState<any>(null);\n  const [_title, setTitle] = React.useState<any>(\"Unknown\");\n  const { loading, error, data, refetch } = useQuery<ImageTypeData>(IMAGES);\n\n  const handleDrop = (file: File) => {\n    console.log(\"File dropped: \" + file.name);\n    const reader = new FileReader();\n\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => console.log(\"file reading has failed\");\n    reader.onload = () => {\n      // Do whatever you want with the file contents\n      const binaryStr = reader.result;\n      setFile(file);\n      setImage(binaryStr);\n      setDroped(1);\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleUpload = async () => {\n    await createImage(_image, _file.name);\n    refetch();\n  };\n\n  const location = useLocation();\n  const basepath = \"/test/images\";\n  const table_link = basepath + \"/\";\n  const preview_link = basepath + \"/preview\";\n\n  return (\n    <Switch>\n      <Route exact path={table_link}>\n        <Box margin={\"10%\"} marginTop={\"150px\"}>\n\n          <Typography variant=\"h3\" component=\"h2\" marginBottom={\"20px\"}>\n            Image table\n          </Typography>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"collapsible table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Id</TableCell>\n                  <TableCell>Title</TableCell>\n                  <TableCell align=\"right\">Upload date</TableCell>\n                  <TableCell align=\"right\">Uploader's IP</TableCell>\n                  <TableCell align=\"right\">Operations</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data?.allImages.map((info: ImageType, index) => (\n                  <Row\n                    refetch={refetch}\n                    key={index}\n                    row={{\n                      title: info.title,\n                      index: info.id,\n                      link: info.image,\n                      upload_date: filteredDate(info.uploadDateTime),\n                      uploader_ip: info.uploaderIp,\n                    }}\n                  />\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Box marginTop={\"30px\"} width={\"100%\"} marginX={\"auto\"}>\n            <ChooseFile onDrop={handleDrop} />\n\n            <Box\n              width={\"100px\"}\n              justifySelf=\"center\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              alignContent=\"center\"\n              marginX={\"auto\"}\n            >\n              {droped ? (\n                <Button\n                  variant=\"contained\"\n                  type=\"button\"\n                  onClick={handleUpload}\n                >\n                  Upload\n                </Button>\n              ) : null}\n            </Box>\n          </Box>\n        </Box>\n      </Route>\n      <Route path={preview_link}>\n        <ImagePreview />\n      </Route>\n    </Switch>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport Box from \"@mui/material/Box\";\nimport Table from '@mui/material/Table';\nimport Button from \"@mui/material/Button\";\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Typography from \"@mui/material/Typography\";\nimport CreateIcon from \"@mui/icons-material/Create\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport CheckIcon from \"@mui/icons-material/Check\";\n\nimport { TextField } from \"@mui/material\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport {\n  Link,\n} from \"react-router-dom\";\n\ninterface Props {\n\n}\n\nconst RENAME_TAG = gql`\n  mutation renameTag($id: ID!, $name: String!) {\n    renameTag(id: $id, name: $name) {\n      tag {\n        id\n        tagName\n      }\n    }\n  }\n`;\n\nconst DELETE_TAG = gql`\n  mutation deleteTag($id: ID!) {\n    deleteTag(id: $id) {\n      tag {\n        tagName\n      }\n    }\n  }\n`;\n\nconst CREATE_TAG = gql`\n  mutation createTag($name: String!) {\n    createTag(name: $name) {\n      tag {\n        id\n        tagName\n      }\n    }\n  }\n`;\n\ninterface TagType {\n    id: number;\n    tagName: string;\n  }\n\nconst TAGS = gql`\n  query {\n  allTags {\n    id\n    tagName\n  }\n}\n`\n\nfunction Row(props: { row: TagType; refetch: any }) {\n  const { row } = props;\n  const [editing, setEditing] = React.useState(0);\n  const [text, setText] = React.useState(row.tagName);\n  const [title, setTitle] = React.useState(row.tagName);\n  const [renameTag, { data, loading, error }] = useMutation(RENAME_TAG);\n  const [deleteTag] = useMutation(DELETE_TAG);\n  const icon_color = \"#8f8f8f\";\n  const wrapperRef = React.useRef(null);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n  const handleConfirm = () => {\n    setTitle(text);\n    renameTag({ variables: { id: row.id, name: text } });\n    setEditing(0);\n  };\n  const handleEdit = () => {\n    setEditing(1);\n  };\n  const handleDeletion = async () => {\n    const data = await deleteTag({ variables: { id: row.id } });\n    props.refetch();\n  };\n\n  return (\n    <React.Fragment>\n      <TableRow key={row.id}>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.id}\n        </TableCell>\n        <TableCell align=\"left\">\n          {editing ? (\n            <TextField onChange={handleChange} value={text} />\n          ) : (\n            title\n          )}\n        </TableCell>\n        <TableCell align=\"right\">\n          {editing ? (\n            <CheckIcon\n              onClick={handleConfirm}\n              style={{\n                marginRight: \"10px\",\n                color: icon_color,\n                cursor: \"pointer\",\n              }}\n            />\n          ) : (\n            <CreateIcon\n              onClick={handleEdit}\n              style={{\n                marginRight: \"10px\",\n                color: icon_color,\n                cursor: \"pointer\",\n              }}\n            />\n          )}\n          <DeleteIcon\n            onClick={handleDeletion}\n            style={{ color: icon_color, cursor: \"pointer\" }}\n          />\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nfunction createData(\n  name: string,\n  calories: number,\n  fat: number,\n  carbs: number,\n  protein: number,\n) {\n  return { name, calories, fat, carbs, protein };\n}\n\nexport default function TagTable(props: Props) {\n  const [tagName, setTagName] = useState(\"\");\n  const { loading, error, data, refetch } = useQuery<{ allTags: TagType[] }>(TAGS);\n  const [createTag] = useMutation(CREATE_TAG);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTagName(event.target.value);\n  };\n\n  const handleCreation = async () => {\n    try {\n      await createTag({variables: { name: tagName }});\n      refetch();\n    } catch (error) {\n      console.log(\"Duplicate entry!!\")\n    }\n  }\n\n  return (\n    <Box margin={\"10%\"} marginTop={\"150px\"}>\n      <Typography variant=\"h3\" component=\"h2\" marginBottom={\"20px\"}>\n        Tag table\n      </Typography>\n\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Id</TableCell>\n              <TableCell align=\"left\">Tag name</TableCell>\n              <TableCell align=\"right\">Operations</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.allTags.map((row: TagType, index: number) => (\n              <Row key={row.id} row={row} refetch={refetch}/>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Box display=\"flex\" flexDirection=\"column\">\n      <Typography variant=\"h5\" marginTop={\"40px\"} marginBottom={\"20px\"}>\n        Add new tag\n      </Typography>\n      <TextField onChange={handleChange} label={'Tag name'} style={{marginBottom: \"10px\", width: \"200px\"}} value={tagName} id=\"margin-none\" />\n      <Button onClick={handleCreation} style={{width: \"80px\"}} variant=\"contained\">Save</Button>\n      </Box>\n\n    </Box>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./index.css\"\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  Link,\n} from \"react-router-dom\";\nimport TagTable from './TagTable';\n\n\nconst client = new ApolloClient({\n  uri: 'http://127.0.0.1:8000/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <Router>\n        <Switch>\n          <Route path=\"/test/images\">\n            <App />\n          </Route>\n          <Route path=\"/test/tags\">\n            <TagTable />\n          </Route>\n        </Switch>\n      </Router>\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n\n"],"sourceRoot":""}